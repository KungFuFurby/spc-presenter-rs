import { Palette } from "std-widgets.slint";

export enum TooltipPosition {
    top,
    bottom
}

export component ToolbarButton {
    in property <image> icon;
    in property <string> text: "";
    in property <string> tooltip: "";
    in property <TooltipPosition> tooltip-position: bottom;
    in property <bool> enabled: true;
    in property <bool> destructive: false;
    in property <bool> checkable: false;
    in-out property <bool> checked: false;
    out property <bool> has-hover: i-touch-area.has-hover;

    callback clicked();

    min-height: 32px;
    min-width: 32px;

    i-tooltip := Rectangle {
        y: tooltip-position == TooltipPosition.top ? -self.height - 4px : root.height + 4px;
        width: i-tooltip-text.width + 20px;
        height: i-tooltip-text.height + 16px;
        opacity: 0;

        background: #2c2c2c;
        border-radius: 3px;
        drop-shadow-color: black;
        drop-shadow-blur: 4px;
        drop-shadow-offset-y: 2px;

        i-tooltip-text := Text {
            text: root.tooltip;
            color: #ffffff;
            horizontal-alignment: center;
        }
    }

    i-base := Rectangle {
        border-radius: 4px;
        background: transparent;
        animate background {
            duration: 100ms;
            easing: ease-in-out;
        }

        i-touch-area := TouchArea {
            clicked => {
                if (root.enabled) {
                    if (root.checkable) {
                        root.checked = !root.checked;
                    }
                    root.clicked();
                }
            }

            HorizontalLayout {
                alignment: center;

                Rectangle {
                    width: 6px;
                }
                VerticalLayout {
                    alignment: center;

                    i-icon := Image {
                        width: 20px;
                        source: root.icon;
                        colorize: #ffffff;
                        animate colorize {
                            duration: 100ms;
                            easing: ease-in-out;
                        }
                    }
                }
                if root.text != "" : Rectangle {
                    width: 6px;
                }
                i-text := Text {
                    vertical-alignment: center;
                    text: root.text;
                    color: #ffffff;
                    animate color {
                        duration: 100ms;
                        easing: ease-in-out;
                    }
                }
                Rectangle {
                    width: 6px;
                }
            }
        }
    }

    states [
        disabled-checked when !root.enabled && root.checked: {
            i-base.background: root.destructive ? #832023 : #438FB2;
            i-icon.colorize: root.destructive ? #ffffff87 : #00000087;
            i-text.color: root.destructive ? #ffffff87 : #00000087;
            i-tooltip.opacity: 0;
        }
        disabled when !root.enabled: {
            i-base.background: transparent;
            i-icon.colorize: #FFFFFF87;
            i-text.color: #FFFFFF87;
            i-tooltip.opacity: 0;
        }
        clicked-checked when i-touch-area.pressed && root.checked: {
            i-base.background: root.destructive ? #962528 : #4CA4CC;
            i-icon.colorize: root.destructive ? #ffffff : #000000;
            i-text.color: root.destructive ? #ffffff : #000000;
            i-tooltip.opacity: root.tooltip != "" ? 1 : 0;
        }
        clicked when i-touch-area.pressed: {
            i-base.background: #FFFFFF0F;
            i-icon.colorize: root.destructive ? #bc2f32 : #60cdff;
            i-text.color: root.destructive ? #bc2f32 : #60cdff;
            i-tooltip.opacity: root.tooltip != "" ? 1 : 0;
        }
        hovered-checked when i-touch-area.has-hover && root.checked: {
            i-base.background: root.destructive ? #a92a2d : #56b8e5;
            i-icon.colorize: root.destructive ? #ffffff : #000000;
            i-text.color: root.destructive ? #ffffff : #000000;
            i-tooltip.opacity: root.tooltip != "" ? 1 : 0;

            in {
                animate i-tooltip.opacity {
                    duration: 200ms;
                    delay: 300ms;
                    easing: ease-in-out;
                }
            }
            out {
                animate i-tooltip.opacity {
                    duration: 150ms;
                    easing: ease-in-out;
                }
            }
        }
        hovered when i-touch-area.has-hover: {
            i-base.background: #FFFFFF1F;
            i-icon.colorize: root.destructive ? #bc2f32 : #60cdff;
            i-text.color: root.destructive ? #bc2f32 : #60cdff;
            i-tooltip.opacity: root.tooltip != "" ? 1 : 0;

            in {
                animate i-tooltip.opacity {
                    duration: 200ms;
                    delay: 300ms;
                    easing: ease-in-out;
                }
            }
            out {
                animate i-tooltip.opacity {
                    duration: 150ms;
                    easing: ease-in-out;
                }
            }
        }
        checked when root.checked: {
            i-base.background: root.destructive ? #bc2f32 : #60cdff;
            i-icon.colorize: root.destructive ? #ffffff : #000000;
            i-text.color: root.destructive ? #ffffff : #000000;
        }
    ]
}
