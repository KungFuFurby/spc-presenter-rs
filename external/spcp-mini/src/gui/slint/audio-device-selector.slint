import { ScrollView, Spinner } from "std-widgets.slint";

component AudioDeviceMenuItem {
    in property <string> name;
    in property <bool> selected: false;
    in property <bool> enabled: true;

    callback clicked <=> i-touch-area.clicked;

    min-height: 32px;
    min-width: 200px;

    i-touch-area := TouchArea {
        x: 0;
        y: 0;
        width: root.width;
        height: root.height;
        enabled: root.enabled;
    }

    i-background := Rectangle {
        x: 0;
        y: 0;
        width: root.width;
        height: root.height;
        background: white;
        opacity: 0;
        border-radius: 4px;

        animate opacity {
            duration: 100ms;
            easing: ease-in-out;
        }
    }

    HorizontalLayout {
        x: 0;
        y: 0;
        width: root.width;
        height: root.height;

        alignment: stretch;
        padding: 6px;
        spacing: 8px;

        i-selected-icon := Image {
            width: 20px;
            height: 20px;
            source: @image-url("checkmark.svg");
            opacity: root.selected ? 1 : 0;
        }
        Text {
            text: root.name;
            vertical-alignment: center;
            wrap: no-wrap;
            overflow: elide;
        }
    }

    states [
        active when i-touch-area.pressed: {
            i-background.opacity: 0.3;
        }
        hovered when i-touch-area.has-hover: {
            i-background.opacity: 0.15;
        }
    ]
}

export component AudioDeviceSelector {
    in property <bool> enabled: true;

    in property <bool> updating: false;
    in-out property <string> selected-device-name: "";
    in property <[string]> device-names: ["test 1", "test 2", "test 3", "test 4"];

    callback selected(string);

    min-width: 200px;
    min-height: 64px;

    ScrollView {
        viewport-width: root.width;
        width: root.width;
        height: root.height;
        enabled: root.enabled && !root.updating;

        i-layout := VerticalLayout {
            x: 0;
            y: 0;
            width: root.width;
            alignment: start;
            
            if root.updating: VerticalLayout {
                width: root.width;
                height: root.height;
                alignment: center;
    
                Spinner {
                    indeterminate: true;
                }
            }
            if root.enabled && !root.updating: VerticalLayout {
                width: root.width;
                alignment: start;

                AudioDeviceMenuItem {
                    name: "Default";
                    selected: root.selected-device-name == "";
                    enabled: root.enabled;
                    clicked => {
                        root.selected-device-name = "";
                        root.selected("");
                    }
                }
                for device-name in root.device-names: AudioDeviceMenuItem {
                    name: device-name;
                    selected: root.selected-device-name == device-name;
                    enabled: root.enabled;
                    clicked => {
                        root.selected-device-name = device-name;
                        root.selected(device-name);
                    }
                }
            }
        }
    }
}