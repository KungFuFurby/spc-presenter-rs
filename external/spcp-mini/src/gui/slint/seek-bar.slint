component SeekBarBase {
    in property <bool> enabled <=> touch-area.enabled;
    in property <float> minimum: 0;
    in property <float> maximum: 100;
    in property <Orientation> orientation;
    in property <length> handle-x;
    in property <length> handle-y;
    in property <length> handle-width;
    in property <length> handle-height;
    out property <bool> pressed <=> touch-area.enabled;
    out property <bool> has-hover <=> touch-area.has-hover;
    out property <bool> vertical: root.orientation == Orientation.vertical;
    out property <bool> has-focus <=> focus-scope.has-focus;
    out property <bool> handle-has-hover: touch-area.mouse-x >= root.handle-x && touch-area.mouse-x <= root.handle-x + root.handle-width &&
        touch-area.mouse-y >= root.handle-y && touch-area.mouse-y <= root.handle-y + root.handle-height;
    out property <bool> handle-pressed;
    in-out property <float> value: minimum;

    callback hovered();
    callback changed(/* value */ float);
    callback released(/* value */ float);

    private property <length> ref-size: !root.vertical ? root.handle-width : root.handle-height;

    forward-focus: focus-scope;

    touch-area := TouchArea {
        property <float> pressed-value;

        width: 100%;
        height: 100%;

        pointer-event(event) => {
            root.hovered();

            if (event.button != PointerEventButton.left) {
                return;
            }

            if (event.kind == PointerEventKind.up) {
                if (root.handle-pressed) {
                    root.released(root.value);
                }
                root.handle-pressed = false;
                return;
            }


            /* if (!root.handle-has-hover) { */
                root.set-value((!root.vertical ? root.size-to-value(touch-area.mouse-x, root.width) :
                    root.size-to-value(touch-area.mouse-y, root.height)) + root.minimum);
            /* } */

            self.pressed-value = value;
            root.handle-pressed = true;
        }

        moved => {
            if (!self.enabled) {
                return;
            }

            root.set-value(self.pressed-value + (!vertical ? root.size-to-value(touch-area.mouse-x - touch-area.pressed-x, root.width - root.ref-size) :
                root.size-to-value(touch-area.mouse-y - touch-area.pressed-y, root.height - root.ref-size))
            );
        }
    }

    focus-scope := FocusScope {
        x: 0;
        y: 0;
        width: 0;
        height: 0;
        enabled: root.enabled;

        key-pressed(event) => {
            if (!self.enabled) {
                return reject;
            }

            if ((!vertical && event.text == Key.RightArrow) || (vertical && event.text == Key.DownArrow)) {
                root.set-value(root.value + 1);
                return accept;
            } else if ((!vertical && event.text == Key.LeftArrow) || (vertical && event.text == Key.UpArrow)) {
                root.set-value(root.value - 1);
                return accept;
            }

            reject
        }

        key-released(event) => {
            if (!self.enabled) {
                return reject;
            }
            if (!vertical && event.text == Key.RightArrow) || (vertical && event.text == Key.DownArrow)
               || (!vertical && event.text == Key.LeftArrow) || (vertical && event.text == Key.UpArrow) {
                root.released(root.value);
            }
            return accept;
        }
    }

    pure function size-to-value(size: length, range: length) -> float {
        size * (root.maximum - root.minimum) / range;
    }

    function set-value(value: float) {
        if (root.value == value) {
            return;
        }

        root.value = max(root.minimum, min(root.maximum, value));
        root.changed(root.value);
    }
}

export component SeekBar {
    in property <Orientation> orientation <=> i-base.orientation;
    in property <float> maximum <=> i-base.maximum;
    in property <float> minimum <=> i-base.minimum;
    in property <bool> enabled <=> i-base.enabled;
    out property <bool> has-focus: i-base.has-focus;
    in-out property <float> value <=> i-base.value;
    in property <float> buffer-length: i-base.minimum;
    out property <bool> has-hover: i-base.has-hover;

    callback hovered <=> i-base.hovered;
    callback changed <=> i-base.changed;
    callback released <=> i-base.released;

    min-width: i-base.vertical ? 20px : 0px;
    min-height: i-base.vertical ? 0px : 20px;
    vertical-stretch: i-base.vertical ? 1 : 0;
    horizontal-stretch: i-base.vertical ? 0 : 1;
    accessible-role: slider;
    accessible-value: root.value;
    accessible-value-minimum: root.minimum;
    accessible-value-maximum: root.maximum;
    accessible-value-step: (root.maximum - root.minimum) / 100;
    forward-focus: i-base;

    states [
        disabled when !root.enabled : {
            i-track.background: #FFFFFF29;
            i-rail.background: #FFFFFF29;
            i-thumb-inner.background: #FFFFFF29;
        }
        pressed when i-base.handle-pressed || i-base.has-focus : {
            i-thumb-inner.width: 10px;
            i-thumb-inner.background: #60CDFFCC;
            i-thumb.border-color: #FFFFFF14;
        }
        hover when i-base.has-hover : {
            i-thumb-inner.width: 14px;
            i-thumb-inner.background: #60CDFFE6;
        }
    ]

    i-rail := Rectangle {
        width: i-base.vertical ? 4px : parent.width;
        height: i-base.vertical ? parent.height : 4px;
        background: #FFFFFF14;
        border-radius: 2px;
    }

    i-buffer-rail := Rectangle {
        x: i-base.vertical ? (parent.width - self.width) / 2 : 0;
        y: i-base.vertical ? 0 : (parent.height - self.height) / 2;
        width: i-base.vertical ? 4px : parent.width * (root.buffer-length - root.minimum) / (root.maximum - root.minimum);
        height: i-base.vertical ? parent.height * (root.buffer-length - root.minimum) / (root.maximum - root.minimum) : 4px;
        background: i-rail.background;
        border-radius: i-rail.border-radius;
    }

    i-track := Rectangle {
        x: i-base.vertical ? (parent.width - self.width) / 2 : 0;
        y: i-base.vertical ? 0 : (parent.height - self.height) / 2;
        width: i-base.vertical ? i-rail.width : i-thumb.x + (i-thumb.width / 2);
        height: i-base.vertical ? i-thumb.y + (i-thumb.height / 2) : i-rail.height;
        background: #60CDFF;
        border-radius: i-rail.border-radius;
    }

    i-thumb := Rectangle {
        x: i-base.vertical ? (parent.width - self.width) / 2 : (parent.width - self.width) * (root.value - root.minimum) / (root.maximum - root.minimum);
        y: i-base.vertical ? (parent.height - self.height) * (root.value - root.minimum) / (root.maximum - root.minimum) : (parent.height - self.height) / 2;
        width: 20px;
        height: self.width;
        border-radius: 10px;
        background: #454545;

        i-thumb-border := Rectangle {
            x: (parent.width - self.width) / 2;
            y: (parent.height - self.height) / 2;
            width: 21px;
            height: self.width;
            border-radius: 10.5px;
            border-width: 1px;
            border-color: @linear-gradient(180deg, #FFFFFF17 0%, #FFFFFF12 100%);
        }

        i-thumb-inner := Rectangle {
            width: 12px;
            height: self.width;
            border-radius: self.width / 2;
            background: #60CDFF;

            animate background, width { duration: 150ms; }
        }
    }

    i-base := SeekBarBase {
        width: 100%;
        height: 100%;
        handle-x: i-thumb.x;
        handle-y: i-thumb.y;
        handle-width: i-thumb.width;
        handle-height: i-thumb.height;
    }
}

export component BufferingSeekBar {
    min-height: 20px;
    vertical-stretch: 0;
    horizontal-stretch: 1;

    property<float> i-progress-anim-tick: -cos(180deg * mod(animation-tick() / 1.3s, 2) / 2) + 1;

    VerticalLayout {
        alignment: center;
        Rectangle {
            height: 4px;
            clip: true;

            border-radius: 3px;
            background: #FFFFFF14;

            Rectangle {
                x: (4 * (root.i-progress-anim-tick / 1.4) - 1) * parent.width;
                y: 0;
                height: parent.height;
                width: 0.5 * parent.width;

                border-width: 1px;
                border-radius: 2px;
                border-color: root.i-progress-anim-tick > 1.4 ? transparent : #60cdff;
                background: root.i-progress-anim-tick > 1.4 ? transparent : #60cdff;
            }
            Rectangle {
                x: (3.1666 * ((root.i-progress-anim-tick - 0.6) / 1.4) - 1.5) * parent.width;
                y: 0;
                height: parent.height;
                width: 0.8 * parent.width;

                border-width: 1px;
                border-radius: 2px;
                border-color: root.i-progress-anim-tick < 0.6 ? transparent : #60cdff;
                background: root.i-progress-anim-tick < 0.6 ? transparent : #60cdff;
            }
        }
    }
}
