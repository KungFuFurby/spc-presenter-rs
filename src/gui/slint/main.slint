import { AboutSlint, VerticalBox, Button, StandardButton, SpinBox, CheckBox, LineEdit, ComboBox } from "std-widgets.slint";
import { ToolbarButton } from "./toolbar-button.slint";
import { PitchType, SampleConfig, SampleUtils, SampleConfigWidget } from "./sample-config.slint";
export { PitchType, SampleConfig, SampleUtils }
import { ColorUtils, ColorPickerButton } from "./color-picker.slint";
export { ColorUtils }

export enum StopConditionType {
    Frames, Time, SpcDuration
}

export enum ResamplingType {
    Accurate, Gaussian, Linear
}

component FileBrowser {
    callback browse() -> string;
    callback cleared();

    in property <string> text: "File:";
    in property <bool> enabled: true;
    in property <bool> clearable: false;
    out property <string> path: "";

    HorizontalLayout {
        alignment: stretch;
        spacing: 8px;
        Text {
            text: root.text;
            vertical-alignment: center;
        }
        LineEdit {
            enabled: false;
            text: path;
            placeholder-text: "No file selected";
        }
        Button {
            text: "Browse...";
            enabled: root.enabled;
            clicked => {
                root.path = root.browse();
            }
        }
        if root.clearable: Button {
            text: "Clear";
            enabled: root.enabled;
            clicked => {
                root.path = "";
                root.cleared();
            }
        }
    }
}

export component MainWindow inherits Window {
    callback browse-for-module() -> string;
    callback browse-for-background() -> string;
    callback background-cleared();
    callback import-tunings();
    callback format-duration(StopConditionType, int) -> string;
    callback start-render();
    callback cancel-render();
    callback play-audio(SampleConfig) -> bool;
    callback stop-audio();
    callback change-audio-pitch(SampleConfig, int) -> int;
    callback dump-sample(SampleConfig);
    callback import-config();
    callback export-config();
    callback reset-config();
    callback update-config(bool);

    in property <string> version: "?";
    in property <string> ffmpeg-version: "?";

    in property <bool> rendering: false;
    in property <bool> processing-samples: false;
    in property <float> progress: 0.0;
    in property <string> progress-title: "Idle";
    in property <string> progress-status: "";
    in property <bool> progress-error: false;
    in property <bool> progress-indeterminate: false;

    property<float> i-progress-anim-tick: -cos(180deg * mod(animation-tick() / 1.3s, 2) / 2) + 1;

    in property <[string]> metadata-lines: ["<no metadata>"];
    in-out property <[[int]]> channel-base-colors: [];
    in-out property <[SampleConfig]> sample-configs: [];
    in-out property <int> fadeout-duration: 180;
    in-out property <int> output-width: 1920;
    in-out property <int> output-height: 1080;
    in-out property <bool> filter-enabled: true;

    out property <StopConditionType> stop-condition-type: StopConditionType.Time;
    out property <int> stop-condition-num: 300;

    property <bool> configuration-open: true;

    public function reformat-duration() {
        i-formatted-duration.text = root.format-duration(root.stop-condition-type, root.stop-condition-num);
    }

    public function reset-sample-configs() {
        i-sample-config-widget.reset();
    }

    public function audio-stopped() {
        i-sample-config-widget.audio-stopped();
    }

    property <int> i-resampling-type-index: 0;
    property <string> i-resampling-type-text: "Hardware-accurate Gaussian";

    public pure function resampling-type() -> ResamplingType {
        if (root.i-resampling-type-index == 1) {
            ResamplingType.Gaussian
        } else if (root.i-resampling-type-index == 2) {
           ResamplingType.Linear
        } else {
            ResamplingType.Accurate
        }
    }

    public function set-resampling-type(new-resampling-type: ResamplingType) {
        if (new-resampling-type == ResamplingType.Accurate) {
            root.i-resampling-type-text = "Hardware-accurate Gaussian";
            root.i-resampling-type-index = 0;
        } else if (new-resampling-type == ResamplingType.Gaussian) {
            root.i-resampling-type-text = "High-fidelity Gaussian";
            root.i-resampling-type-index = 1;
        } else if (new-resampling-type == ResamplingType.Linear) {
            root.i-resampling-type-text = "Linear";
            root.i-resampling-type-index = 2;
        }
    }

    title: "SPCPresenter";
    icon: @image-url("spc-presenter-icon.png");
    height: self.min-height;
    width: self.min-width;

    Rectangle {
        ToolbarButton {
            icon: @image-url("info.svg");
            tooltip: "About";
            x: parent.width - self.width - 16px;
            y: 16px;
            clicked => {
                i-about-popup.show()
            }
        }
        i-about-popup := PopupWindow {
            x: parent.width - 308px;
            y: 16px;
            width: 300px;
            height: 300px;

            Rectangle {
                background: #1c1c1c;
                border-radius: 2px;

                VerticalBox {
                    alignment: start;
                    HorizontalLayout {
                        alignment: center;
                        spacing: 8px;

                        Image {
                            width: 32px;
                            height: 32px;
                            source: @image-url("spc-presenter-icon.png");
                            image-rendering: pixelated;
                        }
                        Text {
                            text: "SPCPresenter v" + root.version;
                            font-size: 24px;
                            vertical-alignment: center;
                        }
                    }
                    HorizontalLayout {
                        alignment: center;
                        spacing: 8px;

                        Image {
                            width: 32px;
                            height: 32px;
                            source: @image-url("snes-apu-spcp-icon.png");
                            image-rendering: pixelated;
                        }
                        VerticalLayout {
                            alignment: center;

                            Text {
                                text: "snes-apu-spcp v" + root.version;
                                font-size: 14px;
                                horizontal-alignment: center;
                            }
                            Text {
                                text: "https://github.com/emu-rs/snes-apu";
                                font-size: 10px;
                                horizontal-alignment: center;
                            }
                        }
                    }
                    HorizontalLayout {
                        alignment: center;
                        spacing: 8px;

                        Image {
                            width: 32px;
                            height: 32px;
                            source: @image-url("ffmpeg-icon.png");
                        }
                        VerticalLayout {
                            alignment: center;

                            Text {
                                text: "FFmpeg v" + root.ffmpeg-version;
                                font-size: 14px;
                                horizontal-alignment: center;
                            }
                            Text {
                                text: "https://ffmpeg.org/";
                                font-size: 10px;
                                horizontal-alignment: center;
                            }
                        }
                    }

                    AboutSlint {
                        preferred-height: 100px;
                    }
                    HorizontalLayout {
                        alignment: center;

                        Button { text: "Close"; }
                    }
                }
            }
        }
    }

    VerticalBox {
        alignment: start;
        spacing: 12px;
        z: -5;

        Text {
            text: "SPCPresenter";
            font-size: 32px;
            horizontal-alignment: center;
        }
        FileBrowser {
            text: "Input SPC:";
            enabled: !root.rendering;
            browse => { root.browse-for-module() }
        }
        for line in metadata-lines: Text {
            horizontal-alignment: center;
            text: line;
        }

        HorizontalLayout {
            height: 28px;
            
            Text {
                text: "Base channel colors:";
                vertical-alignment: center;
            }
            Rectangle {
                width: 6px;
            }
            ToolbarButton {
                horizontal-stretch: 0.0;
                icon: @image-url("arrow-import.svg");
                tooltip: "Import";
                enabled: !rendering;
                clicked => {
                    root.import-config();
                }
            }
            ToolbarButton {
                horizontal-stretch: 0.0;
                icon: @image-url("arrow-export.svg");
                tooltip: "Export";
                enabled: !rendering;
                clicked => {
                    root.export-config();
                }
            }
            Rectangle {
                width: 2px;
            }
            for color[i] in channel-base-colors: ColorPickerButton {
                color: color;
                enabled: !root.rendering;
                changed(r, g, b) => {
                    root.channel-base-colors[i] = [r, g, b];
                }
            }
            Rectangle {
                width: 2px;
            }
            ToolbarButton {
                horizontal-stretch: 0.0;
                icon: @image-url("arrow-reset.svg");
                tooltip: "Reset";
                enabled: !root.rendering;
                destructive: true;
                clicked => {
                    root.reset-config();
                }
            }
        }
        HorizontalLayout {
            z: -5;

            TouchArea {
                mouse-cursor: pointer;
                clicked => {
                    root.configuration-open = !root.configuration-open;
                }

                HorizontalLayout {
                    alignment: stretch;
                    spacing: 8px;

                    Image {
                        source: @image-url("chevron-down.svg");
                        rotation-angle: root.configuration-open ? 0deg : -90deg;
                        animate rotation-angle {
                            duration: 100ms;
                            easing: ease-in-out;
                        }
                    }
                    Text {
                        text: "Sample tuning";
                        vertical-alignment: center;
                    }
                    Rectangle {
                        height: 32px;
                        horizontal-stretch: 1.0;
                    }
                }
            }
            if root.configuration-open: ToolbarButton {
                horizontal-stretch: 0.0;
                icon: @image-url("arrow-import.svg");
                text: "Import tunings";
                enabled: !root.rendering && !root.processing-samples;
                clicked => {
                    root.import-tunings();
                }
            }
        }

        VerticalLayout {
            alignment: start;
            spacing: root.configuration-open ? 12px : 0px;

            i-sample-config-widget := SampleConfigWidget {
                sample-configs: root.sample-configs;
                enabled: !root.rendering && !root.processing-samples;
                open: root.configuration-open;

                play-audio(config) => { root.play-audio(config) }
                stop-audio => { root.stop-audio(); }
                change-audio-pitch(config, pitch) => { root.change-audio-pitch(config, pitch) }
                dump-sample(config) => { root.dump-sample(config); }
            }

            FileBrowser {
                text: "Background:";
                enabled: !root.rendering;
                clearable: true;
                browse => { root.browse-for-background() }
                cleared => { root.background-cleared(); }
            }
        }

        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Render duration:";
                vertical-alignment: center;
            }
            if stop-condition-type != StopConditionType.SpcDuration : LineEdit {
                enabled: !rendering;
                text: stop-condition-num;
                edited => {
                    if (self.text.is-float()) {
                        root.stop-condition-num = self.text.to-float();
                        root.reformat-duration();
                    }
                }
            }
            ComboBox {
                model: ["seconds", "frames", "SPC duration"];
                enabled: !rendering;
                selected => {
                    if (self.current-index == 0) {
                        root.stop-condition-type = StopConditionType.Time;
                    } else if (self.current-index == 1) {
                        root.stop-condition-type = StopConditionType.Frames;
                    } else if (self.current-index == 2) {
                        root.stop-condition-type = StopConditionType.SpcDuration;
                    }
                    root.reformat-duration();
                }
            }
            i-formatted-duration := Text {
                text: "00:05:00";
                vertical-alignment: center;
                color: self.text == "<error>"
                    ? red
                    : white;
            }
        }

        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Fadeout frames:";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> root.fadeout-duration;
                minimum: 0;
                maximum: 1200;
                enabled: !root.rendering;
            }
        }

        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Output video size:";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> root.output-width;
                minimum: 960;
                maximum: 7680;
                enabled: !root.rendering;
            }
            Text {
                text: "×";
                vertical-alignment: center;
            }
            SpinBox {
                value <=> root.output-height;
                minimum: 540;
                maximum: 4320;
                enabled: !root.rendering;
            }
            Button {
                text: "1080p";
                enabled: !rendering;
                clicked => {
                    root.output-width = 1920;
                    root.output-height = 1080;
                }
            }
            Button {
                text: "4K";
                enabled: !root.rendering;
                clicked => {
                    root.output-width = 3840;
                    root.output-height = 2160;
                }
            }
        }

        HorizontalLayout {
            alignment: stretch;
            spacing: 8px;
            Text {
                text: "Sample interpolation:";
                vertical-alignment: center;
            }
            ComboBox {
                model: ["Hardware-accurate Gaussian", "High-fidelity Gaussian", "Linear"];
                enabled: !root.rendering;
                current-index <=> root.i-resampling-type-index;
                current-value <=> root.i-resampling-type-text;
            }
        }

        HorizontalLayout {
            alignment: center;
            spacing: 8px;

            CheckBox {
                text: "Blargg's DSP post-filter";
                checked <=> root.filter-enabled;
                enabled: !root.rendering;
            }
        }

        HorizontalLayout {
            alignment: center;
            Button {
                text: rendering
                    ? "Cancel"
                    : "Render!";
                primary: !root.rendering;
                enabled: !root.processing-samples;
                clicked => {
                    if (root.rendering) {
                        root.cancel_render();
                    } else {
                        root.start_render();
                    }
                }
            }
        }

        VerticalBox {
            alignment: start;
            spacing: 8px;

            Text {
                text: root.progress-title;
                font-size: 16px;
            }
            Rectangle {
                height: 6px;
                clip: true;

                border-radius: 3px;
                background: #313131;  // Palette.neutralLighter

                if !root.progress-indeterminate: Rectangle {
                    x: 0;
                    y: 0;
                    height: parent.height;
                    width: Math.max(0.0, Math.min(root.progress, 1.0)) * parent.width;

                    border-width: 1px;
                    border-radius: 3px;
                    border-color: root.progress-error ? #bc2f32 : #60cdff;  // Palette.themePrimary
                    background: root.progress-error ? #bc2f32 : #60cdff;  // Palette.themePrimary

                    animate width {
                        duration: 100ms;
                        easing: ease-in-out;
                    }
                }
                if root.progress-indeterminate: Rectangle {
                    x: (4 * (root.i-progress-anim-tick / 1.4) - 1) * parent.width;
                    y: 0;
                    height: parent.height;
                    width: 0.5 * parent.width;

                    border-width: 1px;
                    border-radius: 3px;
                    border-color: root.i-progress-anim-tick > 1.4 ? transparent : #60cdff;  // Palette.themePrimary
                    background: root.i-progress-anim-tick > 1.4 ? transparent : #60cdff;  // Palette.themePrimary
                }
                if root.progress-indeterminate: Rectangle {
                    x: (3.1666 * ((root.i-progress-anim-tick - 0.6) / 1.4) - 1.5) * parent.width;
                    y: 0;
                    height: parent.height;
                    width: 0.8 * parent.width;

                    border-width: 1px;
                    border-radius: 3px;
                    border-color: root.i-progress-anim-tick < 0.6 ? transparent : #60cdff;  // Palette.themePrimary
                    background: root.i-progress-anim-tick < 0.6 ? transparent : #60cdff;  // Palette.themePrimary
                }
            }
            HorizontalLayout {
                alignment: start;
                spacing: 6px;

                if root.progress-error: Image {
                    colorize: #bc2f32;
                    height: 16px;
                    width: 16px;
                    source: @image-url("circle-error.svg");
                }
                Text {
                    text: root.progress-status;
                    color: root.progress-error ? #bc2f32 : #ffffff;
                    vertical-alignment: center;
                }
            }
        }
    }
}
