export struct LocalizationArg {
    id: string,
    is-int: bool,
    s-value: string,
    i-value: int
}

export global Localization {
    public pure function arg(id: string, value: string) -> LocalizationArg {
        { id: id, is-int: false, s-value: value, i-value: 0 }
    }

    public pure function int-arg(id: string, value: int) -> LocalizationArg {
        { id: id, is-int: true, s-value: "", i-value: value }
    }

    pure callback languages() -> [string];

    property <int> i-cache-bust: 0;
    callback i-set-language(string);
    pure callback i-current-language(int) -> string;
    pure callback i-tr(int, string) -> string;
    pure callback i-tr-args(int, string, [LocalizationArg]) -> string;

    public function set-language(language: string) {
        i-cache-bust = i-cache-bust + 1;
        i-set-language(language);
    }

    public pure function current-language() -> string {
        i-current-language(i-cache-bust)
    }

    public pure function tr(message-id: string) -> string {
        i-tr(i-cache-bust, message-id)
    }

    public pure function tr-args(message-id: string, args: [LocalizationArg]) -> string {
        i-tr-args(i-cache-bust, message-id, args)
    }

    public pure function tr-arr(messages: [string]) -> [string] {
        if (i-cache-bust < 0) {
            debug(i-cache-bust);
        }
        messages
    }
}
