export component PianoKeys {
    in property <[int]> octaves: [4];
    out property <int> selected-note: -1;

    in property <brush> white-key-color: @linear-gradient(180deg, #f0f0f0 0%, white 100%);
    in property <brush> black-key-color: @linear-gradient(180deg, #323232 0%, #434343 85%, black 100%);
    in property <brush> selected-white-key-color: @linear-gradient(180deg, #f0f0f0 0%, #d0d0d0 100%);
    in property <brush> selected-black-key-color: @linear-gradient(180deg, #323232 0%, #212121 95%, black 100%);

    property <int> i-hovered-index: -1;
    property <int> i-selected-note: -1;
    property <int> i-last-selected-note: -1;
    property <[int]> i-white-key-indices: [0, 2, 4, 5, 7, 9, 11];

    preferred-height: 50px;
    preferred-width: 100px * octaves.length;

    callback changed(int);

    function i-update-selected-note() {
        if (i-touch-area.pressed && i-touch-area.mouse-x >= 0 && i-touch-area.mouse-x < root.width) {
            if (i-touch-area.mouse-y < (2 * root.height / 3)) {
                root.i-hovered-index = Math.floor(i-touch-area.mouse-x / ((root.width / root.octaves.length) / 12));
            } else {
                root.i-hovered-index = i-white-key-indices[Math.mod(Math.floor(i-touch-area.mouse-x / ((root.width / root.octaves.length) / 7)), 7)] + (Math.floor(i-touch-area.mouse-x / ((root.width / root.octaves.length))) * 12);
            }
            root.selected-note = 12 * (root.octaves[Math.floor(root.i-hovered-index / 12)] + 1) + Math.mod(root.i-hovered-index, 12);
        } else {
            root.selected-note = -1;
        }

        if (root.selected-note != root.i-last-selected-note) {
            changed(root.selected-note);
        }
        root.i-last-selected-note = root.selected-note;
    }

    i-touch-area := TouchArea {
        moved => {
            root.i-update-selected-note();
        }
        pointer-event => {
            root.i-update-selected-note();
        }

        for octave[o] in octaves : Rectangle {
            Text {
                x: (root.width / root.octaves.length) * o;
                y: 2 * root.height / 3;
                width: (root.width / root.octaves.length) / 7;
                height: root.height / 3;
                horizontal-alignment: center;
                vertical-alignment: center;
                font-size: Math.min((root.width / root.octaves.length) / 8, root.height / 4);
                color: root.black-key-color;
                z: 2;

                text: octave;
            }
            for key[i] in [0, 2, 4, 5, 7, 9, 11] : Rectangle {
                x: (root.width / root.octaves.length) * (i + 7 * o) / 7;
                y: 0;
                width: (root.width / root.octaves.length) / 7;
                height: root.height;

                background: (12 * (octave + 1) + key) == root.selected-note ? root.selected-white-key-color : root.white-key-color;
                border-color: black;
                border-width: 1px;
                border-radius: 2px;
            }
            for key[i] in [1, 3, 6, 8, 10] : Rectangle {
                x: (root.width / root.octaves.length) * (i + (key > 5 ? 1.703333 : 0.703333) + 7 * o) / 7;
                y: 0;
                width: (root.width / root.octaves.length) / 12;
                height: 2 * root.height / 3;

                background: (12 * (octave + 1) + key) == root.selected-note ? root.selected-black-key-color : root.black-key-color;
                border-color: black;
                border-width: 2px;
                border-radius: 2px;
            }
        }
    }
}